/*
Licensing statement by mattdiamond (https://github.com/mattdiamond/Recorderjs):

Permission is hereby granted, free of charge, to any person obtaining a copy of this software
and associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/

import InlineWorker from"inline-worker";export class Recorder{constructor(a,b){this.config={bufferLen:4096,numChannels:2,mimeType:"audio/wav"},this.recording=!1,this.callbacks={getBuffer:[],exportWAV:[]},Object.assign(this.config,b),this.context=a.context,this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,this.config.bufferLen,this.config.numChannels,this.config.numChannels),this.node.onaudioprocess=a=>{if(this.recording){for(var b=[],c=0;c<this.config.numChannels;c++)b.push(a.inputBuffer.getChannelData(c));this.worker.postMessage({command:"record",buffer:b})}},a.connect(this.node),this.node.connect(this.context.destination);this.worker=new InlineWorker(function(){function a(a){m=a.sampleRate,n=a.numChannels,g()}function b(a){for(var b=0;b<n;b++)p[b].push(a[b]);o+=a[0].length}function c(a){let b=[];for(let c=0;c<n;c++)b.push(h(p[c],o));let c=2===n?i(b[0],b[1]):b[0];let d=l(c),e=new Blob([d],{type:a});this.postMessage({command:"exportWAV",data:e})}function d(){let a=[];for(let b=0;b<n;b++)a.push(h(p[b],o));this.postMessage({command:"getBuffer",data:a})}function f(){o=0,p=[],g()}function g(){for(let a=0;a<n;a++)p[a]=[]}function h(a,b){let c=new Float32Array(b),d=0;for(let e=0;e<a.length;e++)c.set(a[e],d),d+=a[e].length;return c}function i(a,b){let c=a.length+b.length,d=new Float32Array(c),e=0,f=0;for(;e<c;)d[e++]=a[f],d[e++]=b[f],f++;return d}function j(a,b,c){for(let d,e=0;e<c.length;e++,b+=2)d=Math.max(-1,Math.min(1,c[e])),a.setInt16(b,0>d?32768*d:32767*d,!0)}function k(a,b,c){for(let d=0;d<c.length;d++)a.setUint8(b+d,c.charCodeAt(d))}function l(a){let b=new ArrayBuffer(44+2*a.length),c=new DataView(b);return k(c,0,"RIFF"),c.setUint32(4,36+2*a.length,!0),k(c,8,"WAVE"),k(c,12,"fmt "),c.setUint32(16,16,!0),c.setUint16(20,1,!0),c.setUint16(22,n,!0),c.setUint32(24,m,!0),c.setUint32(28,4*m,!0),c.setUint16(32,2*n,!0),c.setUint16(34,16,!0),k(c,36,"data"),c.setUint32(40,2*a.length,!0),j(c,44,a),c}let m,n,o=0,p=[];this.onmessage=function(g){switch(g.data.command){case"init":a(g.data.config);break;case"record":b(g.data.buffer);break;case"exportWAV":c(g.data.type);break;case"getBuffer":d();break;case"clear":f();}}},{}),this.worker.postMessage({command:"init",config:{sampleRate:this.context.sampleRate,numChannels:this.config.numChannels}}),this.worker.onmessage=a=>{let b=this.callbacks[a.data.command].pop();"function"==typeof b&&b(a.data.data)}}record(){this.recording=!0}stop(){this.recording=!1}clear(){this.worker.postMessage({command:"clear"})}getBuffer(a){if(a=a||this.config.callback,!a)throw new Error("Callback not set");this.callbacks.getBuffer.push(a),this.worker.postMessage({command:"getBuffer"})}exportWAV(a,b){if(b=b||this.config.mimeType,a=a||this.config.callback,!a)throw new Error("Callback not set");this.callbacks.exportWAV.push(a),this.worker.postMessage({command:"exportWAV",type:b})}static forceDownload(a,b){let c=(window.URL||window.webkitURL).createObjectURL(a),d=window.document.createElement("a");d.href=c,d.download=b||"output.wav";let e=document.createEvent("Event");e.initEvent("click",!0,!0),d.dispatchEvent(e)}}export default Recorder;